#include <bits/stdc++.h> // finding minimum b/w an range[l to r] in o(1)
using namespace std;
 
const int mod = 1e9 + 7;
const int mod1 = 998244353;
 
#define debug(x) cout << #x << " " << x << endl;
#define all(v) v.begin(), v.end()
#define rall(v) v.rbegin(), v.rend()
#define yss "YES"
#define noo "NO"
 
int get(int n) {
  int ct = 0;
  while (n > 1) {
    ct++;
    n >>= 1;
  }
  return ct;
}
 
int getMin(vector<vector<int>> &sparse, int x, int y) {
  int len = y - x + 1;
  int k = get(len);
  return min(sparse[x][k], sparse[y - (1 << k) + 1][k]); // (2, 7) -> min([2, 4], [5, 7]);
}
 
void solve() {
  int n, q;
  cin >> n >> q;
  vector<int> v(n);
  int p = get(n);
  vector<vector<int>> sparse(n, vector<int> (p + 1));
  for (int i = 0; i < n; i++) {
    cin >> v[i];
    sparse[i][0] = v[i];
  }
  for (int j = 1; j <= p; j++) {
    for (int i = 0; i + (1 << j) <= n; i++) { // if we are on the 5 pos of n = 3 array can we check [5][8] no we are going out of bound
      sparse[i][j] = min(sparse[i][j - 1], sparse[i + (1 << (j - 1))][j - 1]); // [1][8] = min([1][4], [5][4])
    }
  }
  while (q--) {
    int a, b;
    cin >> a >> b;
    --a;
    --b;
    cout << getMin(sparse, a, b) << endl;
  }
}
 
int main() {
  ios::sync_with_stdio(false);  
  cin.tie(0);
  int t;
  t = 1;
  // cin >> t;
  while (t--) {
    solve();
  } 
  return 0;
}
